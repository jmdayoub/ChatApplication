import React, { useState, useEffect} from "react";
import { Row, Col} from "react-bootstrap";
import messageServices from "services/messageService";
import debug from "sabio-debug";
import PropTypes from "prop-types";
import Sidebar from "./sidebar/Sidebar";
import ChatBox from "./chatbox/ChatBox";
import { HubConnectionBuilder, LogLevel } from "@microsoft/signalr";
import * as helper from "../../../src/services/serviceHelpers";

const _logger = debug.extend("Chatbox");

const Chat = ({ currentUser }) => {
  const [messages, setMessages] = useState({
    arrayOfMessages: [],
    selectedMessages: [],
    recipientId: "",
  });

  const connection = new HubConnectionBuilder()
  .withUrl(`${helper.API_HOST_PREFIX}/hubs/chathub`)
  .configureLogging(LogLevel.Information)
  .withAutomaticReconnect()
  .build();

  useEffect(() => {
    messageServices
    .getByConversation()      
    .then(getByConvoSuccess)
    .catch(getByConvoError);
  }, []);

  useEffect(() => {
    _logger("connection", connection);
      connection
        .start()
        .then(() => {
          _logger("Connected!", connection);
          connection.on("SendMessage", addNewMsg);
          connection.on("DeleteMessage", (message) => {
            setMessages((prevState) => {
              const newAr = { ...prevState };
              newAr.arrayOfMessages = newAr.arrayOfMessages.filter((x) => String(x.id) !== String(message.id))
              newAr.selectedMessages = newAr.selectedMessages.filter((x) => String(x.id) !== String(message.id))
              return newAr;
            });
          });
        })
        .catch((e) => _logger("Connection failed: ", e));
  }, []);

  const addNewMsg = (message) => {
    setMessages((prevState) => {
      const newAr = { ...prevState };
      newAr.arrayOfMessages.push(message)
      if (!Array.isArray(newAr.selectedMessages)){
        newAr.selectedMessages = []
      }
      newAr.selectedMessages.push(message);
      return newAr;
    });
  }

  const getByConvoSuccess = (response) => {
    response.items.forEach((item) => {
      item.dateSent = `${item.dateSent}Z`;
    });
    let arrayOfMsgs = response.items;
    _logger(response.items)
    setMessages((prevState) => {
      const md = { ...prevState };
      md.arrayOfMessages = arrayOfMsgs;
      return md;
    });
  };

  const getByConvoError = (error) => {
    _logger("GetById Error=>", error);
  };

  const onCardClicked = (target) => {
    target = Number(target);
    _logger('onCardClicked firing',target)
    const filterConvo = (convo) => {
      let result = false;
      if (target === convo.senderId || target === convo.recipientId) {
        if (
          currentUser.id === convo.senderId ||
          currentUser.id === convo.recipientId
        ) {
          result = true;
        }
        return result;
      }
    };
    setMessages((prevState) => {
      const newAr = { ...prevState };
      newAr.selectedMessages = newAr.arrayOfMessages.filter(filterConvo);
      _logger('onCardClicked firing',newAr.selectedMessages)
      newAr.recipientId = target;
      return newAr;
    });
  };


  return (
    <>
      <Row className="g-0">
        <Col xl={3} lg={12} md={12} xs={12}>
          <Sidebar
            currentUser={currentUser}
            cardClicked={onCardClicked}
          ></Sidebar>
        </Col>
        <Col xl={9} lg={12} md={12} xs={12}>
          <ChatBox
            currentUser={currentUser}
            messages={messages.selectedMessages}
            dateSent={messages.selectedMessages.dateSent}
            recipientId={messages.recipientId.toString()}
          />
        </Col>
      </Row>
    </>
  );
};

export default Chat;
Chat.propTypes = {
  currentUser: PropTypes.shape({
    id: PropTypes.number.isRequired,
  }),
};
